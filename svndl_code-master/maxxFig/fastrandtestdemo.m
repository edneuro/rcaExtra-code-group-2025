function fastrandtest( tR )% load fakedata;[ tNT, tNCh, tNSubj ] = size( tR );% figure; plot( squeeze( tR( 1:tNT, 1, : ) ) )% hold on; plot( [ 1:tNT ], mean( tR( 1:tNT, 1, : ), 3 ), 'c-', 'linewidth', 3 )tNTxCh = tNT * tNCh;tR = reshape( tR, tNTxCh, tNSubj );  tTScore = mean( tR, 2 ) ./ std( tR, 0, 2 ) .* sqrt( tNSubj );tRAbs = abs( tR );% create vector of absolute tscores and a corresponding vector of integers (permints)% representing the bitfield of sign permutation to realize abs(...) at each time pointtTScoreAbs = mean( tRAbs, 2 ) ./ std( tRAbs, 0, 2 ) .* sqrt( tNSubj );tPermInt = bits2num( tR == tRAbs ); % % create matrix of tscores and permints for the tNSubj permutations% % that are abs except for one element at each time point% tTScoreAbs1 = zeros( tNTxCh, tNSubj );% tPermInt1 = zeros( tNTxCh, tNSubj );% for iAbs1 = 1:tNSubj% 	tRAbs1 = tRAbs;% 	tRAbs1( :, iAbs1 ) = tRAbs1( :, iAbs1 ) * -1;% 	tPermInt1( :, iAbs1 ) = bits2num( tR == tRAbs1 ); % 	tTScoreAbs1( :, iAbs1 ) = mean( tRAbs1, 2 ) ./ std( tRAbs1, 0, 2 ) .* sqrt( tNSubj );% end% % Collapse these into vectors for the max tscore across each subject at each time point.% % (The order of these two statements matters!)% tPermInt1 = max( tPermInt1 .* ( tTScoreAbs1 == repmat( max( tTScoreAbs1, [], 2 ), 1, tNSubj ) ), [], 2 );% tTScoreAbs1 = max( tTScoreAbs1, [], 2 );% % concatentate with abs vectors% tTScoreAbs = [ tTScoreAbs; tTScoreAbs1 ];% tPermInt = [ tPermInt; tPermInt1 ];tNExt = floor( 2 ^ tNSubj * 0.025 ); % number of extrema, i.e. permutations in 2.5% tails of all permutations% tExt = zeros( tNExt, 1 ); % for debuggingtT = [ 1:tNT ]';figure;tCMap = hsv( tNExt );tCMap = tCMap * 0.5 + 0.5;tiCMap = round( tNExt / 4 );tCMap( [ 2 tiCMap ], : ) = tCMap( [ tiCMap 2 ], : );tCMap( [ 3 2*tiCMap ], : ) = tCMap( [ 2*tiCMap 3 ], : );tCMap( [ 4 3*tiCMap ], : ) = tCMap( [ 3*tiCMap 4 ], : );for iExt = 1:tNExt	[ tMaxTSA, iMaxTSA ] = max( tTScoreAbs ); % the current tMaxTSA, and it's index	subplot( 5, 1, 5 );	hold on;	plot( tT( tPermInt == tPermInt( iMaxTSA ) ), tTScoreAbs( tPermInt == tPermInt( iMaxTSA ) ), ...			'.', 'markersize', 12, 'color', tCMap( iExt, : ) );	plot( tT( iMaxTSA ), tTScoreAbs( iMaxTSA ), 'o', 'color', tCMap( iExt, : ), 'markersize', 12 );	if( any( iExt == [ 1 2 3 51 ] ) )		if( iExt < 4 )			subplot( 5, 1, iExt );		else			subplot( 5, 1, 4 );		end		hold on;		plot( tT( tTScoreAbs > 0 ), tTScoreAbs( tTScoreAbs > 0 ), '.', 'markersize', 10, 'color', [ .6 .6 .6 ] );		plot( tT( tPermInt == tPermInt( iMaxTSA ) ), tTScoreAbs( tPermInt == tPermInt( iMaxTSA ) ), ...				'.', 'markersize', 12, 'color', tCMap( iExt, : ) );		plot( tT( iMaxTSA ), tTScoreAbs( iMaxTSA ), 'o', 'color', tCMap( iExt, : ), 'markersize', 12 );		set( gca, 'color', [ .3 .3 .3 ] );		ylim( [ 0 10 ] );	end	tTScoreAbs( tPermInt == tPermInt( iMaxTSA ) ) = 0;% 	tExt( iExt ) = tMaxTSA;	if( sum( tTScoreAbs ) == 0 )		break;	endendsubplot( 5, 1, 5 );plot( tT( tTScoreAbs > 0 ), tTScoreAbs( tTScoreAbs > 0 ), '.', 'markersize', 12, 'color', [ .6 .6 .6 ] );ylim( [ 0 10 ] );set( gca, 'color', [ .3 .3 .3 ] );% assignin( 'base', 'tExt', tExt );% tCV = tMaxTSA; % the critical value% figure;% tT = [ 1:tNT ]';% for iCh = 1:tNCh% 	tCI = tT + ( iCh - 1 ) * tNT; % current indices into data for this channel%  	subplot( tNCh, 1, iCh );% 	hold on;% 	plot( tT, tR( tCI, : ), 'm-' )% 	tRM = mean( tR( tCI, : ), 2 );% 	plot( tT, tRM, 'c-', 'linewidth', 3 );% 	tTSI = abs( tTScore( tCI ) ) > tCV;% 	plot( tT( tTSI ), tRM( tTSI ), 'k.', 'markersize', 9 );% 	axis tight;% end% tH = allchild( gcf );% tPos = get( tH, 'position' );% tPos = cat( 1, tPos{:} );% tYLim = get( tH, 'ylim' );% tYLim = cat( 1, tYLim{:} );% tYLim = [ min( tYLim( :, 1 ) ) max( tYLim( :, 2 ) ) ];% for iCh = 1:tNCh% 	set( tH( iCh ), 'position', tPos( iCh, : ) + [ 0, -0.01, 0, 0.02 ], 'ylim', tYLim );% endfunction tR = bits2num( tX )[ tNR, tNC ] = size( tX );tR = sum( ones( tNR, 1 ) * pow2( [ (tNC-1):-1:0 ] ) .* tX, 2 ); function tR = onescomp( tV, tNB )tV = tV(:); % tV(:) makes it a column vectortR = sum( ones( length( tV ), 1 ) * pow2( [ (tNB-1):-1:0 ] ) .* ~num2bits( tV, tNB ), 2 );% what kind of works% any( tTScoreAbs1( tPermInt == tPermInt( iMaxTSA ) ) == tMaxTSA1 ) hits the first two interlopers% what doesn't work% simply interlacing tExt and tExt1% cutting out both tTScoreAbs matrices on each pass through% moving tTScoreAbs1 into tTScoreAbs 