function rcaOut = flipSwapRCA(rcaIn, new_order, flip_comp)
    % Description:	Function for reordering and flipping RCs
    %
    % Syntax:	rcaOut = flipSwapRCA(rcaIn,new_order,flip_comp)
    % In:
    %   rcaIn:       output struct generated by rcaRun.m
    %
    %   <optional>:
    %       new_order: new component order [1:n]
    %       flip_comp: index of components to flip [none]
    %
    % Out:
    % 	rcaOut = reordered output struct, 
    %            if single input rcaOut is returned unchanged
    
    n_comp = size(rcaIn.A,2);
    rcaOut = rcaIn;
    
    if nargin < 2 || isempty(new_order)
        new_order = 1:n_comp;
    else
        if ~all(ismember(1:n_comp, new_order))
            msg = '\n new_order indices have to cover the full range of components \n';
            error(msg);
        else
        end
    end
    if nargin < 3
        flip_comp = [];
    else
        if any(~ismember(flip_comp, 1:n_comp))
            msg = '\n flip_comp indices have to be within the range of components \n';
            error(msg);
        else
        end
    end
    
    % first reordering
    rcaOut.rca_data = cellfun(@(x) x(:,new_order,:), rcaIn.rca_data,'uni',false);
    rcaOut.A(:,1:n_comp) = rcaIn.A(:,new_order);
    rcaOut.W(:,1:n_comp) = rcaIn.W(:,new_order);
    % then flipping
    if ~isempty(flip_comp)
        rcaOut.rca_data = cellfun(@(x) flipMe(x,flip_comp), rcaOut.rca_data,'uni',false);
        rcaOut.A(:,flip_comp) = rcaIn.A(:,flip_comp)*-1; 
        rcaOut.W(:,flip_comp) = rcaIn.W(:,flip_comp)*-1;
    else
    end
    
    % account for non-rca "component" (comparison channel)
    real_size = unique(cellfun(@(x) size(x,2), rcaIn.rca_data));
    if numel(real_size) > 1
        msg = '\n oops, dimension two in input is different across subjects/conditions \n';
        error(msg);
    else
    end

    if real_size > n_comp
        add_idx = 1:real_size;
        add_idx = add_idx(~ismember(add_idx, 1:n_comp));
        rcaOut.rca_data = cellfun(@(x,y) cat(2, x, y(:,add_idx,:)), rcaOut.rca_data, rcaIn.rca_data, 'uni', false);
    else
    end
    
    function rcX = flipMe(rcX,flip_comp)
        for f = 1:length(flip_comp)
            rcX(:,flip_comp(f),:) = rcX(:,flip_comp(f),:)*-1;
        end
    end
end

